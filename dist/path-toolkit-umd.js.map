{"version":3,"file":"path-toolkit-umd.js","sources":["tk.js"],"sourcesContent":["// Parsing, tokeninzing, etc\n'use strict';\n\n// Some constants for convenience\nvar UNDEF = (function(u){return u;})();\n\n// Static strings, assigned to aid code minification\nvar $WILDCARD     = '*',\n    $UNDEFINED    = 'undefined',\n    $STRING       = 'string',\n    $PARENT       = 'parent',\n    $ROOT         = 'root',\n    $PLACEHOLDER  = 'placeholder',\n    $CONTEXT      = 'context',\n    $PROPERTY     = 'property',\n    $COLLECTION   = 'collection',\n    $SINGLEQUOTE  = 'singlequote',\n    $DOUBLEQUOTE  = 'doublequote',\n    $CALL         = 'call',\n    $EVALPROPERTY = 'evalProperty';\n    \n/**\n * Private Function\n * Tests whether a wildcard templates matches a given string.\n * ```javascript\n * var str = 'aaabbbxxxcccddd';\n * wildCardMatch('aaabbbxxxcccddd'); // true\n * wildCardMatch('*', str); // true\n * wildCardMatch('*', ''); // true\n * wildCardMatch('a*', str); // true\n * wildCardMatch('aa*ddd', str); // true\n * wildCardMatch('*d', str); // true\n * wildCardMatch('*a', str); // false\n * wildCardMatch('a*z', str); // false\n * ```\n * @param  {String} template Wildcard pattern\n * @param  {String} str      String to match against wildcard pattern\n * @return {Boolean}          True if pattern matches string; False if not\n */\nvar wildCardMatch = function(template, str){\n    var pos = template.indexOf($WILDCARD),\n        parts = template.split($WILDCARD, 2),\n        match = true;\n    if (parts[0]){\n        // If no wildcard present, return simple string comparison\n        if (parts[0] === template){\n            return parts[0] === str;\n        }\n        else {\n            match = match && str.substr(0, parts[0].length) === parts[0];\n        }\n    }\n    if (parts[1]){\n        match = match && str.substr(-1*parts[1].length) === parts[1];\n    }\n    return match;\n};\n\n/**\n * Private Function\n * Inspect input value and determine whether it is an Object or not.\n * Values of undefined and null will return \"false\", otherwise\n * must be of type \"object\" or \"function\".\n * @param  {Object}  val Thing to examine, may be of any type\n * @return {Boolean}     True if thing is of type \"object\" or \"function\"\n */\nvar isObject = function(val){\n    if (typeof val === $UNDEFINED || val === null) { return false;}\n    return ( (typeof val === 'function') || (typeof val === 'object') );\n};\n\n/**\n * Private Function\n * Convert various values to true boolean `true` or `false`.\n * For non-string values, the native javascript idea of \"true\" will apply.\n * For string values, the words \"true\", \"yes\", and \"on\" will all return `true`.\n * All other strings return `false`. The string match is non-case-sensitive.\n */\nvar truthify = function(val){\n    var v;\n    if (typeof val !== $STRING){\n        return val && true; // Use native javascript notion of \"truthy\"\n    }\n    v = val.toUpperCase();\n    if (v === 'TRUE' || v === 'YES' || v === 'ON'){\n        return true;\n    }\n    return false;\n};\n\n/**\n * Private Function\n * Using provided quote character as prefix and suffix, escape any instances\n * of the quote character within the string and return quote+string+quote.\n * The character defined as \"singlequote\" may be altered by custom options,\n * so a general-purpose function is needed to quote path segments correctly.\n * @param  {String} q   Single-character string to use as quote character\n * @param  {String} str String to be quoted.\n * @return {String}     Original string, surrounded by the quote character,\n * possibly modified internally if the quote character exists within the string.\n */\nvar quoteString = function(q, str){\n    var qRegEx = new RegExp(q, 'g');\n    return q + str.replace(qRegEx, '\\\\' + q) + q;\n};\n\n/**\n * Constructor\n * PathToolkit base object. Includes all instance-specific data (options, cache)\n * as local variables. May be passed an options hash to pre-configure the\n * instance prior to use.\n * @param {Object} options Optional. Collection of configuration settings for this\n * instance of PathToolkit. See `setOptions` function below for detailed documentation.\n */\nvar PathToolkit = function(options){\n    var _this = this,\n        cache = {},\n        opt = {},\n        prefixList, separatorList, containerList, containerCloseList,\n        propertySeparator,\n        singlequote,\n        simplePathChars, simplePathRegEx,\n        allSpecials, allSpecialsRegEx,\n        escapedNonSpecialsRegEx,\n        wildcardRegEx;\n\n    /**\n     * Private Function\n     * Several regular expressions are pre-compiled for use in path interpretation.\n     * These expressions are built from the current syntax configuration, so they\n     * must be re-built every time the syntax changes.\n     */\n    var updateRegEx = function(){\n        // Lists of special characters for use in regular expressions\n        prefixList = Object.keys(opt.prefixes);\n        separatorList = Object.keys(opt.separators);\n        containerList = Object.keys(opt.containers);\n        containerCloseList = containerList.map(function(key){ return opt.containers[key].closer; });\n        \n        propertySeparator = '';\n        Object.keys(opt.separators).forEach(function(sep){ if (opt.separators[sep].exec === $PROPERTY){ propertySeparator = sep; } });\n        singlequote = '';\n        Object.keys(opt.containers).forEach(function(sep){ if (opt.containers[sep].exec === $SINGLEQUOTE){ singlequote = sep; } });\n\n        // Find all special characters except property separator (. by default)\n        simplePathChars = '[\\\\\\\\' + [$WILDCARD].concat(prefixList).concat(separatorList).concat(containerList).join('\\\\').replace('\\\\'+propertySeparator, '') + ']';\n        simplePathRegEx = new RegExp(simplePathChars);\n        \n        // Find all special characters, including backslash\n        allSpecials = '[\\\\\\\\\\\\' + [$WILDCARD].concat(prefixList).concat(separatorList).concat(containerList).concat(containerCloseList).join('\\\\') + ']';\n        allSpecialsRegEx = new RegExp(allSpecials, 'g');\n        \n        // Find all escaped special characters\n        // escapedSpecialsRegEx = new RegExp('\\\\'+allSpecials, 'g');\n        // Find all escaped non-special characters, i.e. unnecessary escapes\n        escapedNonSpecialsRegEx = new RegExp('\\\\'+allSpecials.replace(/^\\[/,'[^'));\n        \n        // Find wildcard character\n        wildcardRegEx = new RegExp('\\\\'+$WILDCARD);\n    };\n\n    /**\n     * Private Function\n     * Sets all the default options for interpreter behavior and syntax.\n     */\n    var setDefaultOptions = function(){\n        opt = opt || {};\n        // Default settings\n        opt.useCache = true;  // cache tokenized paths for repeated use\n        opt.simple = false;   // only support dot-separated paths, no other special characters\n        opt.force = false;    // create intermediate properties during `set` operation\n\n        // Default prefix special characters\n        opt.prefixes = {\n            '<': {\n                'exec': $PARENT\n            },\n            '~': {\n                'exec': $ROOT\n            },\n            '%': {\n                'exec': $PLACEHOLDER\n            },\n            '@': {\n                'exec': $CONTEXT\n            }\n        };\n        // Default separator special characters\n        opt.separators = {\n            '.': {\n                'exec': $PROPERTY\n                },\n            ',': {\n                'exec': $COLLECTION\n                }\n        };\n        // Default container special characters\n        opt.containers = {\n            '[': {\n                'closer': ']',\n                'exec': $PROPERTY\n                },\n            '\\'': {\n                'closer': '\\'',\n                'exec': $SINGLEQUOTE\n                },\n            '\"': {\n                'closer': '\"',\n                'exec': $DOUBLEQUOTE\n                },\n            '(': {\n                'closer': ')',\n                'exec': $CALL\n                },\n            '{': {\n                'closer': '}',\n                'exec': $EVALPROPERTY\n                }\n        };\n    };\n\n    /**\n     * Private Function\n     * Scan input string from left to right, one character at a time. If a special character\n     * is found (one of \"separators\", \"containers\", or \"prefixes\"), either store the accumulated\n     * word as a token or else begin watching input for end of token (finding a closing character\n     * for a container or the end of a collection). If a container is found, capture the substring\n     * within the container and recursively call `tokenize` on that substring. Final output will\n     * be an array of tokens. A complex token (not a simple property or index) will be represented\n     * as an object carrying metadata for processing.\n     * @param  {String} str Path string\n     * @return {Array}     Array of tokens found in the input path\n     */\n    var tokenize = function (str){\n        var path = '',\n            tokens = [],\n            recur = [],\n            mods = {},\n            pathLength = 0,\n            word = '',\n            hasWildcard = false,\n            subpath = '',\n            i = 0,\n            opener = '',\n            closer = '',\n            separator = '',\n            collection = [],\n            depth = 0,\n            escaped = 0;\n\n        if (opt.useCache && cache[str] !== UNDEF){ return cache[str]; }\n\n        // Strip out any unnecessary escaping to simplify processing below\n        path = str.replace(escapedNonSpecialsRegEx, '$&'.substr(1));\n        pathLength = path.length;\n\n        if (typeof str === $STRING && !simplePathRegEx.test(str)){\n            tokens = path.split(propertySeparator);\n            opt.useCache && (cache[str] = tokens);\n            return tokens;\n        }\n\n        for (i = 0; i < pathLength; i++){\n            // Skip escape character (`\\`) and set \"escaped\" to the index value\n            // of the character to be treated as a literal\n            if (!escaped && path[i] === '\\\\'){\n                // Next character is the escaped character\n                escaped = i+1;\n                i++;\n            }\n            // If a wildcard character is found, mark this token as having a wildcard\n            if (path[i] === $WILDCARD) {\n                hasWildcard = true;\n            }\n            // If we have already processed a container opener, treat this subpath specially\n            if (depth > 0){\n                // Is this character another opener from the same container? If so, add to\n                // the depth level so we can match the closers correctly. (Except for quotes\n                // which cannot be nested)\n                // Is this character the closer? If so, back out one level of depth.\n                // Be careful: quote container uses same character for opener and closer.\n                !escaped && path[i] === opener && opener !== closer.closer && depth++;\n                !escaped && path[i] === closer.closer && depth--;\n\n                // While still inside the container, just add to the subpath\n                if (depth > 0){\n                    subpath += path[i];\n                }\n                // When we close off the container, time to process the subpath and add results to our tokens\n                else {\n                    // Handle subpath \"[bar]\" in foo.[bar],[baz] - we must process subpath and create a new collection\n                    if (i+1 < pathLength && opt.separators[path[i+1]] && opt.separators[path[i+1]].exec === $COLLECTION){\n                        recur = tokenize(subpath);\n                        if (recur === UNDEF){ return undefined; }\n                        collection.push({'t':recur, 'exec': closer.exec});\n                    }\n                    // Handle subpath \"[baz]\" in foo.[bar],[baz] - we must process subpath and add to collection\n                    else if (collection[0]){\n                        recur = tokenize(subpath);\n                        if (recur === UNDEF){ return undefined; }\n                        collection.push({'t':recur, 'exec': closer.exec});\n                        tokens.push(collection);\n                        collection = [];\n                    }\n                    // Simple property container is equivalent to dot-separated token. Just add this token to tokens.\n                    else if (closer.exec === $PROPERTY){\n                        recur = tokenize(subpath);\n                        if (recur === UNDEF){ return undefined; }\n                        tokens = tokens.concat(recur);\n                    }\n                    // Quoted subpath is all taken literally without token evaluation. Just add subpath to tokens as-is.\n                    else if (closer.exec === $SINGLEQUOTE || closer.exec === $DOUBLEQUOTE){\n                        tokens.push(subpath);\n                    }\n                    // Otherwise, create token object to hold tokenized subpath, add to tokens.\n                    else {\n                        recur = tokenize(subpath);\n                        if (recur === UNDEF){ return undefined; }\n                        tokens.push({'t':recur, 'exec': closer.exec});\n                    }\n                    subpath = ''; // reset subpath\n                }\n            }\n            // If a prefix character is found, store it in `mods` for later reference.\n            // Must keep count due to `parent` prefix that can be used multiple times in one token.\n            else if (!escaped && path[i] in opt.prefixes && opt.prefixes[path[i]].exec){\n                mods.has = true;\n                if (mods[opt.prefixes[path[i]].exec]) { mods[opt.prefixes[path[i]].exec]++; }\n                else { mods[opt.prefixes[path[i]].exec] = 1; }\n            }\n            // If a separator is found, time to store the token we've been accumulating. If\n            // this token had a prefix, we store the token as an object with modifier data.\n            // If the separator is the collection separator, we must either create or add\n            // to a collection for this token. For simple separator, we either add the token\n            // to the token list or else add to the existing collection if it exists.\n            else if (!escaped && opt.separators.hasOwnProperty(path[i]) && opt.separators[path[i]].exec){\n                separator = opt.separators[path[i]];\n                if (!word && (mods.has || hasWildcard)){\n                    // found a separator, after seeing prefixes, but no token word -> invalid\n                    return undefined;\n                }\n                // This token will require special interpreter processing due to prefix or wildcard.\n                if (word && (mods.has || hasWildcard)){\n                    word = {'w': word, 'mods': mods};\n                    mods = {};\n                }\n                // word is a plain property or end of collection\n                if (separator.exec === $PROPERTY){\n                    // we are gathering a collection, so add last word to collection and then store\n                    if (collection[0] !== UNDEF){\n                        word && collection.push(word);\n                        tokens.push(collection);\n                        collection = []; // reset\n                    }\n                    // word is a plain property\n                    else {\n                        word && tokens.push(word);\n                    }\n                }\n                // word is a collection\n                else if (separator.exec === $COLLECTION){\n                    word && collection.push(word);\n                }\n                word = ''; // reset\n                hasWildcard = false; // reset\n            }\n            // Found a container opening character. A container opening is equivalent to\n            // finding a separator, so \"foo.bar\" is equivalent to \"foo[bar]\", so apply similar\n            // process as separator above with respect to token we have accumulated so far.\n            // Except in case collections - path may have a collection of containers, so\n            // in \"foo[bar],[baz]\", the \"[bar]\" marks the end of token \"foo\", but \"[baz]\" is\n            // merely another entry in the collection, so we don't close off the collection token\n            // yet.\n            // Set depth value for further processing.\n            else if (!escaped && opt.containers.hasOwnProperty(path[i]) && opt.containers[path[i]].exec){\n                closer = opt.containers[path[i]];\n                if (word && (mods.has || hasWildcard)){\n                    word = {'w': word, 'mods': mods};\n                    mods = {};\n                }\n                if (collection[0] !== UNDEF){\n                    // we are gathering a collection, so add last word to collection and then store\n                    word && collection.push(word);\n                }\n                else {\n                    // word is a plain property\n                    word && tokens.push(word);\n                }\n                word = '';\n                hasWildcard = false;\n                opener = path[i];\n                depth++;\n            }\n            // Otherwise, this is just another character to add to the current token\n            else if (i < pathLength) {\n                word += path[i];\n            }\n\n            // If current path index matches the escape index value, reset `escaped`\n            if (i < pathLength && i === escaped){\n                escaped = 0;\n            }\n        }\n\n        // Path ended in an escape character\n        if (escaped){\n            return undefined;\n        }\n\n        // Add trailing word to tokens, if present\n        if (word && (mods.has || hasWildcard)){\n            word = {'w': word, 'mods': mods};\n            mods = {};\n        }\n        // We are gathering a collection, so add last word to collection and then store\n        if (collection[0] !== UNDEF){\n            word && collection.push(word);\n            tokens.push(collection);\n        }\n        // Word is a plain property\n        else {\n            word && tokens.push(word);\n        }\n\n        // depth != 0 means mismatched containers\n        if (depth !== 0){ return undefined; }\n\n        // If path was valid, cache the result\n        opt.useCache && (cache[str] = tokens);\n\n        return tokens;\n    };\n\n    /**\n     * Private Function\n     * It is `resolvePath`'s job to traverse an object according to the tokens\n     * derived from the keypath and either return the value found there or set\n     * a new value in that location.\n     * The tokens are a simple array and `reoslvePath` loops through the list\n     * with a simple \"while\" loop. A token may itself be a nested token array,\n     * which is processed through recursion.\n     * As each successive value is resolved within `obj`, the current value is\n     * pushed onto the \"valueStack\", enabling backward references (upwards in `obj`)\n     * through path prefixes like \"<\" for \"parent\" and \"~\" for \"root\". The loop\n     * short-circuits by returning `undefined` if the path is invalid at any point,\n     * except in `set` scenario with `force` enabled.\n     * @param  {Object} obj        The data object to be read/written\n     * @param  {String} path       The keypath which `resolvePath` will evaluate against `obj`. May be a pre-compiled Tokens set instead of a string.\n     * @param  {Any} newValue   The new value to set at the point described by `path`. Undefined if used in `get` scenario.\n     * @param  {Array} args       Array of extra arguments which may be referenced by placeholders. Undefined if no extra arguments were given.\n     * @param  {Array} valueStack Stack of object contexts accumulated as the path tokens are processed in `obj`\n     * @return {Any}            In `get`, returns the value found in `obj` at `path`. In `set`, returns the new value that was set in `obj`. If `get` or `set` are nto successful, returns `undefined`\n     */\n    var resolvePath = function (obj, path, newValue, args, valueStack){\n        var change = newValue !== UNDEF, // are we setting a new value?\n            tk = [],\n            tkLength = 0,\n            tkLastIdx = 0,\n            valueStackLength = 1,\n            i = 0,\n            prev = obj,\n            curr = '',\n            currLength = 0,\n            wordCopy = '',\n            contextProp,\n            idx = 0,\n            context = obj,\n            ret,\n            newValueHere = false,\n            placeInt = 0,\n            prop = '',\n            callArgs;\n\n        // For String path, either fetch tokens from cache or from `tokenize`.\n        if (typeof path === $STRING){\n            if (opt.useCache && cache[path]) { tk = cache[path]; }\n            else {\n                tk = tokenize(path);\n                if (tk === UNDEF){ return undefined; }\n            }\n        }\n        // For a non-string, assume a pre-compiled token array\n        else {\n            tk = path.t ? path.t : [path];\n        }\n\n        tkLength = tk.length;\n        if (tkLength === 0) { return undefined; }\n        tkLastIdx = tkLength - 1;\n\n        // valueStack will be an array if we are within a recursive call to `resolvePath`\n        if (valueStack){\n            valueStackLength = valueStack.length;\n        }\n        // On original entry to `resolvePath`, initialize valueStack with the base object.\n        // valueStackLength was already initialized to 1.\n        else {\n            valueStack = [obj];\n        }\n\n        // Converted Array.reduce into while loop, still using \"prev\", \"curr\", \"idx\"\n        // as loop values\n        while (prev !== UNDEF && idx < tkLength){\n            curr = tk[idx];\n\n            // If we are setting a new value and this token is the last token, this\n            // is the point where the new value must be set.\n            newValueHere = (change && (idx === tkLastIdx));\n\n            // Handle most common simple path scenario first\n            if (typeof curr === $STRING){\n                // If we are setting...\n                if (change){\n                    // If this is the final token where the new value goes, set it\n                    if (newValueHere){\n                        context[curr] = newValue;\n                        if (context[curr] !== newValue){ return undefined; } // new value failed to set\n                    }\n                    // For earlier tokens, create object properties if \"force\" is enabled\n                    else if (opt.force && (Array.isArray(prev) ? context[curr] !== UNDEF : !context.hasOwnProperty(curr))) {\n                        context[curr] = {};\n                    }\n                }\n                // Return value is assigned as value of this object property\n                ret = context[curr];\n\n                // This basic structure is repeated in other scenarios below, so the logic\n                // pattern is only documented here for brevity.\n            }\n            else {\n                if (curr === UNDEF){\n                    ret = undefined;\n                }\n                else if (Array.isArray(curr)){\n                    // Call resolvePath again with base value as evaluated value so far and\n                    // each element of array as the path. Concat all the results together.\n                    ret = [];\n                    currLength = curr.length\n                    for (i = 0; i < currLength; i++){\n                        contextProp = resolvePath(context, curr[i], newValue, args, valueStack.slice());\n                        if (contextProp === UNDEF) { return undefined; }\n\n                        if (newValueHere){\n                            if (curr[i].t && curr[i].exec === $EVALPROPERTY){\n                                context[contextProp] = newValue;\n                            } else {\n                                ret = ret.concat(contextProp);\n                            }\n                        }\n                        else {\n                            if (curr[i].t && curr[i].exec === $EVALPROPERTY){\n                                ret = ret.concat(context[contextProp]);\n                            } else {\n                                ret = ret.concat(contextProp);\n                            }\n                        }\n                    }\n                }\n                else if (curr.w){\n                    // this word token has modifiers\n                    wordCopy = curr.w + '';\n                    if (curr.mods.parent){\n                        // modify current context, shift upwards in base object one level\n                        context = valueStack[valueStackLength - 1 - curr.mods.parent];\n                        if (context === UNDEF) { return undefined; }\n                    }\n                    if (curr.mods.root){\n                        // Reset context and valueStack, start over at root in this context\n                        context = valueStack[0];\n                        valueStack = [context];\n                        valueStackLength = 1;\n                    }\n                    if (curr.mods.placeholder){\n                        placeInt = wordCopy - 1;\n                        if (args[placeInt] === UNDEF){ return undefined; }\n                        // Force args[placeInt] to String, won't atwordCopyt to process\n                        // arg of type function, array, or plain object\n                        wordCopy = args[placeInt].toString();\n                    }\n                    \n                    // \"context\" modifier (\"@\" by default) replaces current context with a value from\n                    // the arguments.\n                    if (curr.mods.context){\n                        placeInt = wordCopy - 1;\n                        if (args[placeInt] === UNDEF){ return undefined; }\n                        // Force args[placeInt] to String, won't atwordCopyt to process\n                        // arg of type function, array, or plain object\n                        ret = args[placeInt];\n                    }\n                    else {\n                        // Repeat basic string property processing with word and modified context\n                        if (context[wordCopy] !== UNDEF) {\n                            if (newValueHere){ context[wordCopy] = newValue; }\n                            ret = context[wordCopy];\n                        }\n                        else if (typeof context === 'function'){\n                            ret = wordCopy;\n                        }\n                        // Plain property tokens are listed as special word tokens whenever\n                        // a wildcard is found within the property string. A wildcard in a\n                        // property causes an array of matching properties to be returned,\n                        // so loop through all properties and evaluate token for every\n                        // property where `wildCardMatch` returns true.\n                        else if (wildcardRegEx.test(wordCopy)){\n                            ret = [];\n                            for (prop in context){\n                                if (context.hasOwnProperty(prop) && wildCardMatch(wordCopy, prop)){\n                                    if (newValueHere){ context[prop] = newValue; }\n                                    ret.push(context[prop]);\n                                }\n                            }\n                        }\n                        else { return undefined; }\n                    }\n                }\n                // Eval Property tokens operate on a temporary context created by\n                // recursively calling `resolvePath` with a copy of the valueStack.\n                else if (curr.exec === $EVALPROPERTY){\n                    if (newValueHere){\n                        context[resolvePath(context, curr, UNDEF, args, valueStack.slice())] = newValue;\n                    }\n                    ret = context[resolvePath(context, curr, UNDEF, args, valueStack.slice())];\n                }\n                // Functions are called using `call` or `apply`, depending on the state of\n                // the arguments within the ( ) container. Functions are executed with \"this\"\n                // set to the context immediately prior to the function in the stack.\n                // For example, \"a.b.c.fn()\" is equivalent to obj.a.b.c.fn.call(obj.a.b.c)\n                else if (curr.exec === $CALL){\n                    // If function call has arguments, process those arguments as a new path\n                    if (curr.t && curr.t.length){\n                        callArgs = resolvePath(context, curr, UNDEF, args);\n                        if (callArgs === UNDEF){\n                            ret = context.apply(valueStack[valueStackLength - 2]);\n                        }\n                        else if (Array.isArray(callArgs)){\n                            ret = context.apply(valueStack[valueStackLength - 2], callArgs);\n                        }\n                        else {\n                            ret = context.call(valueStack[valueStackLength - 2], callArgs);\n                        }\n                    }\n                    else {\n                        ret = context.call(valueStack[valueStackLength - 2]);\n                    }\n                }\n            }\n            // Add the return value to the stack in case we must loop again\n            valueStack.push(ret);\n            valueStackLength++;\n            context = ret;\n            prev = ret;\n            idx++;\n        }\n        return context;\n    };\n\n    /**\n     * Private Function\n     * Simplified path evaluation heavily optimized for performance when\n     * processing paths with only property names or indices and separators.\n     * If the path can be correctly processed with \"path.split(separator)\",\n     * this function will do so. Any other special characters found in the\n     * path will cause the path to be evaluated with the full `resolvePath`\n     * function instead.\n     * @param  {Object} obj        The data object to be read/written\n     * @param  {String} path       The keypath which `resolvePath` will evaluate against `obj`.\n     * @param  {Any} newValue   The new value to set at the point described by `path`. Undefined if used in `get` scenario.\n     * @return {Any}            In `get`, returns the value found in `obj` at `path`. In `set`, returns the new value that was set in `obj`. If `get` or `set` are nto successful, returns `undefined`\n     */\n    var quickResolveString = function(obj, path, newValue){\n        var change = newValue !== UNDEF,\n            tk = [],\n            i = 0,\n            tkLength = 0;\n\n        tk = path.split(propertySeparator);\n        tkLength = tk.length;\n        while (obj !== UNDEF && i < tkLength){\n            if (tk[i] === ''){ return undefined; }\n            else if (change){\n                if (i === tkLength - 1){\n                    obj[tk[i]] = newValue;\n                }\n                // For arrays, test current context against undefined to avoid parsing this segment as a number.\n                // For anything else, use hasOwnProperty.\n                else if (opt.force && (Array.isArray(obj) ? obj[tk[i]] !== UNDEF : !obj.hasOwnProperty(tk[i]))) {\n                    obj[tk[i]] = {};\n                }\n            }\n            obj = obj[tk[i++]];\n        }\n        return obj;\n    };\n\n    /**\n     * Private Function\n     * Simplified path evaluation heavily optimized for performance when\n     * processing array of simple path tokens (plain property names).\n     * This function is essentially the same as `quickResolveString` except\n     * `quickResolveTokenArray` does nto need to execute path.split.\n     * @param  {Object} obj        The data object to be read/written\n     * @param  {Array} tk       The token array which `resolvePath` will evaluate against `obj`.\n     * @param  {Any} newValue   The new value to set at the point described by `path`. Undefined if used in `get` scenario.\n     * @return {Any}            In `get`, returns the value found in `obj` at `path`. In `set`, returns the new value that was set in `obj`. If `get` or `set` are nto successful, returns `undefined`\n     */\n    var quickResolveTokenArray = function(obj, tk, newValue){\n        var change = newValue !== UNDEF,\n            i = 0,\n            tkLength = tk.length;\n\n        while (obj != null && i < tkLength){\n            if (tk[i] === ''){ return undefined; }\n            else if (change){\n                if (i === tkLength - 1){\n                    obj[tk[i]] = newValue;\n                }\n                // For arrays, test current context against undefined to avoid parsing this segment as a number.\n                // For anything else, use hasOwnProperty.\n                else if (opt.force && (Array.isArray(obj) ? obj[tk[i]] !== UNDEF : !obj.hasOwnProperty(tk[i]))) {\n                    obj[tk[i]] = {};\n                }\n            }\n            obj = obj[tk[i++]];\n        }\n        return obj;\n    };\n\n    var scanForValue = function(obj, val, savePath, path){\n        var i, len, more, keys, prop;\n\n        path = path ? path : '';\n\n        if (obj === val){\n            return savePath(path); // true -> keep looking; false -> stop now\n        }\n        else if (Array.isArray(obj)){\n            len = obj.length;\n            for(i = 0; i < len; i++){\n                more = scanForValue(obj[i], val, savePath, path + propertySeparator + i);\n                if (!more){ return; }\n            }\n            return true; // keep looking\n        }\n        else if (isObject(obj)) {\n            keys = Object.keys(obj);\n            len = keys.length;\n            if (len > 1){ keys = keys.sort(); } // Force order of object keys to produce repeatable results\n            for (i = 0; i < len; i++){\n                if (obj.hasOwnProperty(keys[i])){\n                    prop = keys[i];\n                    if (allSpecialsRegEx.test(prop)){\n                        prop = quoteString(singlequote, prop);\n                    }\n                    more = scanForValue(obj[keys[i]], val, savePath, path + propertySeparator + prop);\n                    if (!more){ return; }\n                }\n            }\n            return true; // keep looking\n        }\n        // Leaf node (string, number, character, boolean, etc.), but didn't match\n        return true; // keep looking\n    };\n\n    _this.getTokens = function(path){\n        var tokens = tokenize(path);\n        if (typeof tokens === $UNDEFINED){ return undefined; }\n        return {t: tokens};\n    };\n\n    _this.isValid = function(path){\n        return typeof tokenize(path) !== $UNDEFINED;\n    };\n\n    _this.escape = function(path){\n        return path.replace(allSpecialsRegEx, '\\\\$&');\n    };\n\n    _this.get = function (obj, path){\n        var i = 0,\n            len = arguments.length,\n            args;\n        if (typeof path === $STRING && !simplePathRegEx.test(path)){\n            return quickResolveString(obj, path);\n        }\n        else if (Object.hasOwnProperty.call(path, 't') && Array.isArray(path.t)){\n            for (i = path.t.length - 1; i >= 0; i--){\n                if (typeof path.t[i] !== $STRING){\n                    args = [];\n                    if (len > 2){\n                        for (i = 2; i < len; i++) { args[i-2] = arguments[i]; }\n                    }\n                    return resolvePath(obj, path, undefined, args);\n                }\n            }\n            return quickResolveTokenArray(obj, path.t);\n        }\n        args = [];\n        if (len > 2){\n            for (i = 2; i < len; i++) { args[i-2] = arguments[i]; }\n        }\n        return resolvePath(obj, path, undefined, args);\n    };\n\n    _this.set = function(obj, path, val){\n        var i = 0,\n            len = arguments.length,\n            args,\n            ref,\n            done = false;\n            \n            // args = len > 3 ? new Array(len - 3) : [],\n        if (typeof path === $STRING && !simplePathRegEx.test(path)){\n            ref = quickResolveString(obj, path, val);\n            done = true;\n        }\n        else if (Object.hasOwnProperty.call(path, 't') && Array.isArray(path.t)){\n            for (i = path.t.length - 1; i >= 0; i--){\n                // Short circuit as soon as we find a copmlex token\n                if (!done && typeof path.t[i] !== $STRING){\n                    args = [];\n                    if (len > 3){\n                        for (i = 3; i < len; i++) { args[i-3] = arguments[i]; }\n                    }\n                    ref = resolvePath(obj, path, val, args);\n                    done = true;\n                }\n            }\n            // We had a token array of simple tokens\n            if (!done){\n                ref = quickResolveTokenArray(obj, path.t, val);\n            }\n        }\n        // Path was (probably) a string and it contained complex path characters\n        else {\n            if (len > 3){\n                args = [];\n                for (i = 3; i < len; i++) { args[i-3] = arguments[i]; }\n            }\n            ref = resolvePath(obj, path, val, args);\n        }\n        \n        if (Array.isArray(ref)){\n            return ref.indexOf(undefined) === -1;\n        }\n        return ref !== UNDEF;\n    };\n\n    _this.find = function(obj, val, oneOrMany){\n        var retVal = [];\n        var savePath = function(path){\n            retVal.push(path.substr(1));\n            if(!oneOrMany || oneOrMany === 'one'){\n                retVal = retVal[0];\n                return false;\n            }\n            return true;\n        };\n        scanForValue(obj, val, savePath);\n        return retVal[0] ? retVal : undefined;\n    };\n\n    var updateOptionChar = function(optionGroup, charType, val, closer){\n        var oldVal = '';\n        Object.keys(optionGroup).forEach(function(str){ if (optionGroup[str].exec === charType){ oldVal = str; } });\n\n        delete optionGroup[oldVal];\n        optionGroup[val] = {exec: charType};\n        if (closer){ optionGroup[val].closer = closer; }\n    };\n\n    var setSimpleOptions = function(sep){\n        var sepOpts = {};\n        if (!(typeof sep === $STRING && sep.length === 1)){\n            sep = '.';\n        }\n        sepOpts[sep] = {exec: $PROPERTY};\n        opt.prefixes = {};\n        opt.containers = {};\n        opt.separators = sepOpts;\n    };\n\n    _this.setOptions = function(options){\n        if (options.prefixes){\n            opt.prefixes = options.prefixes;\n            cache = {};\n        }\n        if (options.separators){\n            opt.separators = options.separators;\n            cache = {};\n        }\n        if (options.containers){\n            opt.containers = options.containers;\n            cache = {};\n        }\n        if (typeof options.cache !== $UNDEFINED){\n            opt.useCache = !!options.cache;\n        }\n        if (typeof options.simple !== $UNDEFINED){\n            var tempCache = opt.useCache; // preserve these two options after \"setDefaultOptions\"\n            var tempForce = opt.force;\n            \n            opt.simple = truthify(options.simple);\n            if (opt.simple){\n                setSimpleOptions();\n            }\n            else {\n                setDefaultOptions();\n                opt.useCache = tempCache;\n                opt.force = tempForce;\n            }\n            cache = {};\n        }\n        if (typeof options.force !== $UNDEFINED){\n            opt.force = truthify(options.force);\n        }\n        updateRegEx();\n    };\n\n    _this.setCache = function(val){\n        opt.useCache = truthify(val);\n    };\n    _this.setCacheOn = function(){\n        opt.useCache = true;\n    };\n    _this.setCacheOff = function(){\n        opt.useCache = false;\n    };\n\n    _this.setForce = function(val){\n        opt.force = truthify(val);\n    };\n    _this.setForceOn = function(){\n        opt.force = true;\n    };\n    _this.setForceOff = function(){\n        opt.force = false;\n    };\n\n    _this.setSimple = function(val, sep){\n        var tempCache = opt.useCache; // preserve these two options after \"setDefaultOptions\"\n        var tempForce = opt.force;\n        opt.simple = truthify(val);\n        if (opt.simple){\n            setSimpleOptions(sep);\n            updateRegEx();\n        }\n        else {\n            setDefaultOptions();\n            updateRegEx();\n            opt.useCache = tempCache;\n            opt.force = tempForce;\n        }\n        cache = {};\n    };\n    _this.setSimpleOn = function(sep){\n        opt.simple = true;\n        setSimpleOptions(sep);\n        updateRegEx();\n        cache = {};\n    };\n    _this.setSimpleOff = function(){\n        var tempCache = opt.useCache; // preserve these two options after \"setDefaultOptions\"\n        var tempForce = opt.force;\n        opt.simple = false;\n        setDefaultOptions();\n        updateRegEx();\n        opt.useCache = tempCache;\n        opt.force = tempForce;\n        cache = {};\n    };\n\n    _this.setSeparatorProperty = function(val){\n        if (typeof val === $STRING && val.length === 1){\n            if (val !== $WILDCARD && (!opt.separators[val] || opt.separators[val].exec === $PROPERTY) && !(opt.prefixes[val] || opt.containers[val])){\n                updateOptionChar(opt.separators, $PROPERTY, val);\n                updateRegEx();\n                cache = {};\n            }\n            else {\n                throw new Error('setSeparatorProperty - value already in use');\n            }\n        }\n        else {\n            throw new Error('setSeparatorProperty - invalid value');\n        }\n    };\n\n    _this.setSeparatorCollection = function(val){\n        if (typeof val === $STRING && val.length === 1){\n            if (val !== $WILDCARD && (!opt.separators[val] || opt.separators[val].exec === $COLLECTION) && !(opt.prefixes[val] || opt.containers[val])){\n                updateOptionChar(opt.separators, $COLLECTION, val);\n                updateRegEx();\n                cache = {};\n            }\n            else {\n                throw new Error('setSeparatorCollection - value already in use');\n            }\n        }\n        else {\n            throw new Error('setSeparatorCollection - invalid value');\n        }\n    };\n\n    _this.setPrefixParent = function(val){\n        if (typeof val === $STRING && val.length === 1){\n            if (val !== $WILDCARD && (!opt.prefixes[val] || opt.prefixes[val].exec === $PARENT) && !(opt.separators[val] || opt.containers[val])){\n                updateOptionChar(opt.prefixes, $PARENT, val);\n                updateRegEx();\n                cache = {};\n            }\n            else {\n                throw new Error('setPrefixParent - value already in use');\n            }\n        }\n        else {\n            throw new Error('setPrefixParent - invalid value');\n        }\n    };\n\n    _this.setPrefixRoot = function(val){\n        if (typeof val === $STRING && val.length === 1){\n            if (val !== $WILDCARD && (!opt.prefixes[val] || opt.prefixes[val].exec === $ROOT) && !(opt.separators[val] || opt.containers[val])){\n                updateOptionChar(opt.prefixes, $ROOT, val);\n                updateRegEx();\n                cache = {};\n            }\n            else {\n                throw new Error('setPrefixRoot - value already in use');\n            }\n        }\n        else {\n            throw new Error('setPrefixRoot - invalid value');\n        }\n    };\n\n    _this.setPrefixPlaceholder = function(val){\n        if (typeof val === $STRING && val.length === 1){\n            if (val !== $WILDCARD && (!opt.prefixes[val] || opt.prefixes[val].exec === $PLACEHOLDER) && !(opt.separators[val] || opt.containers[val])){\n                updateOptionChar(opt.prefixes, $PLACEHOLDER, val);\n                updateRegEx();\n                cache = {};\n            }\n            else {\n                throw new Error('setPrefixPlaceholder - value already in use');\n            }\n        }\n        else {\n            throw new Error('setPrefixPlaceholder - invalid value');\n        }\n    };\n\n    _this.setPrefixContext = function(val){\n        if (typeof val === $STRING && val.length === 1){\n            if (val !== $WILDCARD && (!opt.prefixes[val] || opt.prefixes[val].exec === $CONTEXT) && !(opt.separators[val] || opt.containers[val])){\n                updateOptionChar(opt.prefixes, $CONTEXT, val);\n                updateRegEx();\n                cache = {};\n            }\n            else {\n                throw new Error('setPrefixContext - value already in use');\n            }\n        }\n        else {\n            throw new Error('setPrefixContext - invalid value');\n        }\n    };\n\n    _this.setContainerProperty = function(val, closer){\n        if (typeof val === $STRING && val.length === 1 && typeof closer === $STRING && closer.length === 1){\n            if (val !== $WILDCARD && (!opt.containers[val] || opt.containers[val].exec === $PROPERTY) && !(opt.separators[val] || opt.prefixes[val])){\n                updateOptionChar(opt.containers, $PROPERTY, val, closer);\n                updateRegEx();\n                cache = {};\n            }\n            else {\n                throw new Error('setContainerProperty - value already in use');\n            }\n        }\n        else {\n            throw new Error('setContainerProperty - invalid value');\n        }\n    };\n\n    _this.setContainerSinglequote = function(val, closer){\n        if (typeof val === $STRING && val.length === 1 && typeof closer === $STRING && closer.length === 1){\n            if (val !== $WILDCARD && (!opt.containers[val] || opt.containers[val].exec === $SINGLEQUOTE) && !(opt.separators[val] || opt.prefixes[val])){\n                updateOptionChar(opt.containers, $SINGLEQUOTE, val, closer);\n                updateRegEx();\n                cache = {};\n            }\n            else {\n                throw new Error('setContainerSinglequote - value already in use');\n            }\n        }\n        else {\n            throw new Error('setContainerSinglequote - invalid value');\n        }\n    };\n\n    _this.setContainerDoublequote = function(val, closer){\n        if (typeof val === $STRING && val.length === 1 && typeof closer === $STRING && closer.length === 1){\n            if (val !== $WILDCARD && (!opt.containers[val] || opt.containers[val].exec === $DOUBLEQUOTE) && !(opt.separators[val] || opt.prefixes[val])){\n                updateOptionChar(opt.containers, $DOUBLEQUOTE, val, closer);\n                updateRegEx();\n                cache = {};\n            }\n            else {\n                throw new Error('setContainerDoublequote - value already in use');\n            }\n        }\n        else {\n            throw new Error('setContainerDoublequote - invalid value');\n        }\n    };\n\n    _this.setContainerCall = function(val, closer){\n        if (typeof val === $STRING && val.length === 1 && typeof closer === $STRING && closer.length === 1){\n            if (val !== $WILDCARD && (!opt.containers[val] || opt.containers[val].exec === $CALL) && !(opt.separators[val] || opt.prefixes[val])){\n                updateOptionChar(opt.containers, $CALL, val, closer);\n                updateRegEx();\n                cache = {};\n            }\n            else {\n                throw new Error('setContainerCall - value already in use');\n            }\n        }\n        else {\n            throw new Error('setContainerCall - invalid value');\n        }\n    };\n\n    _this.setContainerEvalProperty = function(val, closer){\n        if (typeof val === $STRING && val.length === 1 && typeof closer === $STRING && closer.length === 1){\n            if (val !== $WILDCARD && (!opt.containers[val] || opt.containers[val].exec === $EVALPROPERTY) && !(opt.separators[val] || opt.prefixes[val])){\n                updateOptionChar(opt.containers, $EVALPROPERTY, val, closer);\n                updateRegEx();\n                cache = {};\n            }\n            else {\n                throw new Error('setContainerEvalProperty - value already in use');\n            }\n        }\n        else {\n            throw new Error('setContainerProperty - invalid value');\n        }\n    };\n\n    _this.resetOptions = function(){\n        setDefaultOptions();\n        updateRegEx();\n        cache = {};\n    };\n\n    // Initialize option set\n    setDefaultOptions();\n    updateRegEx();\n\n    // Apply custom options if provided as argument to constructor\n    options && _this.setOptions(options);\n\n};\n\nexport default PathToolkit;\n"],"names":[],"mappings":"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","sourceRoot":"/source/"}